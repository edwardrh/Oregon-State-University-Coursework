1. How many cost units are spent in the entire process of performing 16 consecutive
 push operations on an empty array which starts out at capacity 8, assuming that
 the array will double in capacity each time new item is added to an already
 full dynamic array? Now try it for 32 consecutive push operations. As N (ie. the number of pushes) grows large, under this strategy
 for resizing, what is the big-oh complexity for push?
 
 8 + (8+1) + 7 = 24 units
 8 + (8+1) + 7 + (16+1) + 15 = 56 units
 O(1+)
 
2. How many cost units are spent in the entire process of performing 16 consecutive
 push operations on an empty array which starts out at capacity 8, assuming that
 the array will grow by a constant 2 spaces each time new item is added to an
 already full dynamic array? Now try it for 32 consecutive push operations. As N
 (ie. the number of pushes) grows large, under this
 strategy for resizing, what is the big-oh complexity for push?
 
 8 + (8+1) + 1 + (10+1) + 1 + (12+1) + 1 +(14+1) + 1 = 60 units
 8 + (8+1) + 1 + (10+1) + 1 + (12+1) + 1 +(14+1) + 1 + (16+1) + 1 + (18+1) + 1 +
 (20 + 1) + 1 + (22+1) + 1 + (24+1) + 1 + (26+1) + 1 +(28+1) + 1 + (30+1) + 1 = 260 units
 O(n)
 
3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks
 (on Pop only) its capacity by half when the array is half full or less. Can you
 devise a sequence of N push() and pop() operations
 which will result in poor performance (O(N^2) total cost)? How might you adjust
 the array's shrinking policy to avoid this? (Hint: You may assume that the
 initial capacity of the array is N/2.)
 
 It would result into a poor performance when you are at the point in the array when
 you are about to double it, but then it will half the capacity again, taking up 
 memory and longer when running the program.
 