
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b0  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fd  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000309  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	50 c0       	rjmp	.+160    	; 0x13c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
	DDRB = 0b11110000;      // configure Port B pins for input/output
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11110000;     // set initial value for Port B outputs
  a2:	88 bb       	out	0x18, r24	; 24
	// (initially, disable both motors)

	DDRD = 0b00000000;      // configure Port D pins for input/output
  a4:	11 ba       	out	0x11, r1	; 17

	while (1) { // loop forever

		PORTB = 0b01100000;     // make TekBot move forward
  a6:	90 e6       	ldi	r25, 0x60	; 96
			_delay_ms(500);        // wait for 500 ms
		}
		else if ((PIND == 0b11111101)) { //Left Whisker Hit
			PORTB = 0b00000000;     // move backward
			_delay_ms(500);         // wait for 500 ms
			PORTB = 0b00100000;     // turn left
  a8:	30 e2       	ldi	r19, 0x20	; 32
		_delay_ms(500);         // wait for 500 ms
		
		if (PIND == 0b11111110) { //Right Whisker Hit
			PORTB = 0b00000000;     // move backward
			_delay_ms(500);         // wait for 500 ms
			PORTB = 0b01000000;     // turn right
  aa:	20 e4       	ldi	r18, 0x40	; 64

	DDRD = 0b00000000;      // configure Port D pins for input/output

	while (1) { // loop forever

		PORTB = 0b01100000;     // make TekBot move forward
  ac:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	59 e6       	ldi	r21, 0x69	; 105
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x16>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x20>
  be:	00 00       	nop
		_delay_ms(500);         // wait for 500 ms
		
		if (PIND == 0b11111110) { //Right Whisker Hit
  c0:	80 b3       	in	r24, 0x10	; 16
  c2:	8e 3f       	cpi	r24, 0xFE	; 254
  c4:	a9 f4       	brne	.+42     	; 0xf0 <main+0x52>
			PORTB = 0b00000000;     // move backward
  c6:	18 ba       	out	0x18, r1	; 24
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	59 e6       	ldi	r21, 0x69	; 105
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x30>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x3a>
  d8:	00 00       	nop
			_delay_ms(500);         // wait for 500 ms
			PORTB = 0b01000000;     // turn right
  da:	28 bb       	out	0x18, r18	; 24
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	59 e6       	ldi	r21, 0x69	; 105
  e0:	88 e1       	ldi	r24, 0x18	; 24
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	50 40       	sbci	r21, 0x00	; 0
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x44>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x4e>
  ec:	00 00       	nop
  ee:	de cf       	rjmp	.-68     	; 0xac <main+0xe>
			_delay_ms(500);        // wait for 500 ms
		}
		else if ((PIND == 0b11111101)) { //Left Whisker Hit
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	8d 3f       	cpi	r24, 0xFD	; 253
  f4:	a9 f4       	brne	.+42     	; 0x120 <main+0x82>
			PORTB = 0b00000000;     // move backward
  f6:	18 ba       	out	0x18, r1	; 24
  f8:	4f ef       	ldi	r20, 0xFF	; 255
  fa:	59 e6       	ldi	r21, 0x69	; 105
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	41 50       	subi	r20, 0x01	; 1
 100:	50 40       	sbci	r21, 0x00	; 0
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x60>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x6a>
 108:	00 00       	nop
			_delay_ms(500);         // wait for 500 ms
			PORTB = 0b00100000;     // turn left
 10a:	38 bb       	out	0x18, r19	; 24
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	59 e6       	ldi	r21, 0x69	; 105
 110:	88 e1       	ldi	r24, 0x18	; 24
 112:	41 50       	subi	r20, 0x01	; 1
 114:	50 40       	sbci	r21, 0x00	; 0
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x74>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x7e>
 11c:	00 00       	nop
 11e:	c6 cf       	rjmp	.-116    	; 0xac <main+0xe>
			_delay_ms(500);        // wait for 500 ms
		}
		else if ((PIND == 0b11111100)) { //Both Whiskers Hit
 120:	80 b3       	in	r24, 0x10	; 16
 122:	8c 3f       	cpi	r24, 0xFC	; 252
 124:	19 f6       	brne	.-122    	; 0xac <main+0xe>
			PORTB = 0b00000000;     // move backward
 126:	18 ba       	out	0x18, r1	; 24
 128:	4f ef       	ldi	r20, 0xFF	; 255
 12a:	59 e6       	ldi	r21, 0x69	; 105
 12c:	88 e1       	ldi	r24, 0x18	; 24
 12e:	41 50       	subi	r20, 0x01	; 1
 130:	50 40       	sbci	r21, 0x00	; 0
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x90>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x9a>
 138:	00 00       	nop
 13a:	b8 cf       	rjmp	.-144    	; 0xac <main+0xe>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
